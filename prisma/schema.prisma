generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())
  email               String?         @unique
  emailVerified       DateTime?
  name                String?
  image               String?
  hashedPassword      String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  userType            UserType?
  stripeCustomerId    String?
  onboardingCompleted Boolean         @default(false)
  Account             Account[]
  Session             Session[]
  Authenticator       Authenticator[]
  Company             Company?
  JobSeeker           JobSeeker?
  SavedJobPost        SavedJobPost[]
  Resume              Resume?

  @@map("users")
}

model Resume {
  id             String           @id @default(cuid())
  userId         String           @unique
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalInfo   PersonalInfo?
  workExperience WorkExperience[]
  projects       Project[]
  education      Education[]
  skills         Skill[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("resumes")
}

model PersonalInfo {
  id        String   @id @default(cuid())
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  fullName  String
  email     String
  location  String
  portfolio String?
  github    String?
  linkedin  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("personal_info")
}

model WorkExperience {
  id           String    @id @default(cuid())
  resumeId     String
  resume       Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  position     String
  company      String
  location     String?
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  highlights   String[]
  technologies String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("work_experience")
}

model Project {
  id           String   @id @default(cuid())
  resumeId     String
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name         String
  description  String
  url          String?
  technologies String[]
  highlights   String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("projects")
}

model Education {
  id           String   @id @default(cuid())
  resumeId     String
  resume       Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  degree       String
  field        String?
  institution  String
  location     String?
  year         Int
  achievements String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("education")
}

model Skill {
  id          String   @id @default(cuid())
  resumeId    String
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  name        String
  category    String
  proficiency Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("skills")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model JobSeeker {
  user               User     @relation(fields: [userId], references: [id])
  expectedSalaryMin  Int?
  expectedSalaryMax  Int?
  preferredLocation  String
  remotePreference   String // "Remote" | "Hybrid" | "On-site"
  yearsOfExperience  Int
  certifications     Json? // Array of certification objects
  availabilityPeriod Int // Notice period in days
  education          Json // Main education array
  educationDetails   Json? // Make educationDetails optional
  desiredEmployment  String // "Full-time" | "Part-time" | "Contract"
  id                 String   @id @default(uuid())
  name               String
  about              String
  resume             String   @db.VarChar(2048) // Increased length for URLs
  skills             String[]
  experience         Int

  location      String
  phoneNumber   String?
  linkedin      String?   @db.VarChar(2048)
  github        String?   @db.VarChar(2048)
  portfolio     String?   @db.VarChar(2048)
  lastAttemptAt DateTime?

  userId       String           @unique
  applications JobApplication[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("job_seekers")
}

model JobAnalysis {
  id        String   @id @default(cuid())
  jobPostId String   @unique
  analysis  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobPost   JobPost  @relation(fields: [jobPostId], references: [id])
}

model Company {
  id        String    @id @default(uuid())
  name      String
  location  String
  logo      String
  website   String
  xAccount  String?
  about     String
  industry  String // Add this field
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  JobPost   JobPost[]

  @@map("companies")
}

model JobPost {
  id              String           @id @default(uuid())
  jobTitle        String
  employmentType  String
  codingQuestions CodingQuestion[]
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String
  listingDuration Int
  benefits        String[]
  status          JobPostStatus    @default(DRAFT)
  applications    Int              @default(0)
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  SavedJobPost    SavedJobPost[]
  JobApplication  JobApplication[]
  JobAnalysis     JobAnalysis? // Add this line to complete the relation

  @@map("job_posts")
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

model SavedJobPost {
  id        String   @id @default(uuid())
  jobId     String
  userId    String
  job       JobPost  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
  @@map("saved_job_posts")
}

model JobApplication {
  id          String            @id @default(uuid())
  jobSeeker   JobSeeker         @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  jobSeekerId String
  job         JobPost           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId       String
  status      ApplicationStatus @default(PENDING)
  coverLetter String?
  resume      String
  answers     Json? // Store validated JSON structure
  aiScore     Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([jobSeekerId, jobId])
  @@map("job_applications")
}

model TestViolation {
  id        String   @id @default(cuid())
  testId    String
  count     Int
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CodingQuestion {
  id          String   @id @default(cuid())
  jobPostId   String
  jobPost     JobPost  @relation(fields: [jobPostId], references: [id])
  title       String
  description String
  difficulty  String
  timeLimit   Int
  testCases   Json
  constraints Json
  examples    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coding_questions")
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
  ACCEPTED
}
